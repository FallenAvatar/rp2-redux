buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mc_version}-${mod_version}"
group = 'fallenavavtar'
archivesBaseName = "${mod_id}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: "${mcp_mappings}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	evaluationDependsOn(':CoFHCore')

    runs {
        data {
            workingDirectory project.file('run')

            properties 'forge.logging.markers': 'REGISTRIES'
            properties 'forge.logging.console.level': 'debug'
			//properties 'mixin.env.disableRefMap': 'true'
			//property 'mixin.env.refMapRemappingFile', "${projectDir}\\build\\createSrgToMcp\\output.srg"

            args '--all', '--output', file('src/generated/'),
                    '--mod', archivesBaseName,
                    '--existing', sourceSets.main.resources.srcDirs[0]

            mods {
                CoFHCore {
                    source findProject(':CoFHCore').sourceSets.main
                }
                RP2 {
                    source findProject(':RP2').sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { // JEI
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven { // Patchouli
        url 'https://maven.blamejared.com'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

	runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

	compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

	if (findProject(':CoFHCore') != null) {
        compile project(':CoFHCore')
    } else {
        // TODO: Maven!
    }
}

jar {
    manifest {
        attributes([
            "Specification-Title"     : "${mod_name}",
			"Specification-Vendor"    : "FallenAvatar",
			"Specification-Version"   : "${mc_version}",
			"Implementation-Title"    : "${mod_id}",
			"Implementation-Vendor"   : "FallenAvatar",
			"Implementation-Version"  : "${mod_version}",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
